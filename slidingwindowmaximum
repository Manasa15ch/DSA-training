package training;

import java.util.*;

public class slidingwindowmaximum {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if (nums == null || k <= 0) {
            return new int[0];
        }
        int n = nums.length;
        int[] res = new int[n - k + 1];
        Deque<Integer> deque = new ArrayDeque<>();  // stores indices

        for (int i = 0; i < n; i++) {
            // 1) Remove indices outside the window
            if (!deque.isEmpty() && deque.peekFirst() < i - k + 1) {
                deque.pollFirst();
            }

            // 2) Remove smaller values at the tail
            while (!deque.isEmpty() && nums[deque.peekLast()] < nums[i]) {
                deque.pollLast();
            }

            // 3) Add current index
            deque.offerLast(i);

            // 4) Record max for windows of size k
            if (i >= k - 1) {
                res[i - k + 1] = nums[deque.peekFirst()];
            }
        }

        return res;
    }

    // Optional main for quick testing
    public static void main(String[] args) {
        slidingwindowmaximum sol = new slidingwindowmaximum();
        int[] nums = {1,3,-1,-3,5,3,6,7};
        int k = 3;
        int[] result = sol.maxSlidingWindow(nums, k);
        System.out.println(Arrays.toString(result));
        // Expected output: [3, 3, 5, 5, 6, 7]
    }
}
